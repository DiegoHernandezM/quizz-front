{"version":3,"file":"static/js/5.d45250d6.chunk.js","mappings":"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","sources":["pages/maps/GoogleMaps/Default.js","pages/maps/GoogleMaps/Hybrid.js","pages/maps/GoogleMaps/LightStyle.js","pages/maps/GoogleMaps/DarkStyle.js","pages/maps/GoogleMaps/Streetview.js","pages/maps/GoogleMaps/Markers.js","pages/maps/GoogleMaps/index.js"],"sourcesContent":["import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport GoogleMapReact, { Maps } from \"google-map-react\";\r\n\r\nimport { CardContent, Card as MuiCard, Typography } from \"@mui/material\";\r\nimport { spacing } from \"@mui/system\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\n\r\nconst Spacer = styled.div(spacing);\r\n\r\nconst GoogleMapReactWrapper = styled.div`\r\n  height: 300px;\r\n  width: 100%;\r\n`;\r\n\r\nfunction Default() {\r\n  const options = {\r\n    center: {\r\n      lat: 40.712784,\r\n      lng: -74.005941,\r\n    },\r\n    zoom: 14,\r\n  };\r\n\r\n  const getMapOptions = (maps: Maps) => {\r\n    return {\r\n      fullscreenControl: true,\r\n      mapTypeControl: true,\r\n      mapTypeId: maps.MapTypeId.ROADMAP,\r\n      scaleControl: true,\r\n      scrollwheel: false,\r\n      streetViewControl: true,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <Card mb={1}>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Default Map\r\n        </Typography>\r\n        <Typography variant=\"body2\" gutterBottom>\r\n          Displays the default road map view.\r\n        </Typography>\r\n\r\n        <Spacer mb={6} />\r\n\r\n        <GoogleMapReactWrapper>\r\n          <GoogleMapReact\r\n            options={getMapOptions}\r\n            bootstrapURLKeys={{\r\n              key: \"AIzaSyA-aWrwgr64q4b3TEZwQ0lkHI4lZK-moM4\",\r\n            }}\r\n            defaultCenter={options.center}\r\n            defaultZoom={options.zoom}\r\n          />\r\n        </GoogleMapReactWrapper>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Default;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport GoogleMapReact, { Maps } from \"google-map-react\";\r\n\r\nimport { CardContent, Card as MuiCard, Typography } from \"@mui/material\";\r\nimport { spacing } from \"@mui/system\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\n\r\nconst Spacer = styled.div(spacing);\r\n\r\nconst GoogleMapReactWrapper = styled.div`\r\n  height: 300px;\r\n  width: 100%;\r\n`;\r\n\r\nfunction Hybrid() {\r\n  const options = {\r\n    center: {\r\n      lat: 40.712784,\r\n      lng: -74.005941,\r\n    },\r\n    zoom: 14,\r\n  };\r\n\r\n  const getMapOptions = (maps: Maps) => {\r\n    return {\r\n      fullscreenControl: true,\r\n      mapTypeControl: true,\r\n      mapTypeId: maps.MapTypeId.HYBRID,\r\n      scaleControl: true,\r\n      scrollwheel: false,\r\n      streetViewControl: true,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <Card mb={1}>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Hybrid Map\r\n        </Typography>\r\n        <Typography variant=\"body2\" gutterBottom>\r\n          Displays a mixture of normal and satellite views.\r\n        </Typography>\r\n\r\n        <Spacer mb={6} />\r\n\r\n        <GoogleMapReactWrapper>\r\n          <GoogleMapReact\r\n            options={getMapOptions}\r\n            bootstrapURLKeys={{\r\n              key: \"AIzaSyA-aWrwgr64q4b3TEZwQ0lkHI4lZK-moM4\",\r\n            }}\r\n            defaultCenter={options.center}\r\n            defaultZoom={options.zoom}\r\n          />\r\n        </GoogleMapReactWrapper>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Hybrid;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport GoogleMapReact from \"google-map-react\";\r\n\r\nimport { CardContent, Card as MuiCard, Typography } from \"@mui/material\";\r\nimport { spacing } from \"@mui/system\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\n\r\nconst Spacer = styled.div(spacing);\r\n\r\nconst GoogleMapReactWrapper = styled.div`\r\n  height: 300px;\r\n  width: 100%;\r\n`;\r\n\r\nfunction LightStyle() {\r\n  const options = {\r\n    center: {\r\n      lat: 40.712784,\r\n      lng: -74.005941,\r\n    },\r\n    zoom: 14,\r\n  };\r\n\r\n  const getMapOptions = () => {\r\n    return {\r\n      fullscreenControl: true,\r\n      mapTypeControl: true,\r\n      scaleControl: true,\r\n      scrollwheel: false,\r\n      streetViewControl: true,\r\n      styles: [\r\n        {\r\n          featureType: \"water\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#e9e9e9\",\r\n            },\r\n            {\r\n              lightness: 17,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"landscape\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#f5f5f5\",\r\n            },\r\n            {\r\n              lightness: 20,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"road.highway\",\r\n          elementType: \"geometry.fill\",\r\n          stylers: [\r\n            {\r\n              color: \"#ffffff\",\r\n            },\r\n            {\r\n              lightness: 17,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"road.highway\",\r\n          elementType: \"geometry.stroke\",\r\n          stylers: [\r\n            {\r\n              color: \"#ffffff\",\r\n            },\r\n            {\r\n              lightness: 29,\r\n            },\r\n            {\r\n              weight: 0.2,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"road.arterial\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#ffffff\",\r\n            },\r\n            {\r\n              lightness: 18,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"road.local\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#ffffff\",\r\n            },\r\n            {\r\n              lightness: 16,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"poi\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#f5f5f5\",\r\n            },\r\n            {\r\n              lightness: 21,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"poi.park\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#dedede\",\r\n            },\r\n            {\r\n              lightness: 21,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          elementType: \"labels.text.stroke\",\r\n          stylers: [\r\n            {\r\n              visibility: \"on\",\r\n            },\r\n            {\r\n              color: \"#ffffff\",\r\n            },\r\n            {\r\n              lightness: 16,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          elementType: \"labels.text.fill\",\r\n          stylers: [\r\n            {\r\n              saturation: 36,\r\n            },\r\n            {\r\n              color: \"#333333\",\r\n            },\r\n            {\r\n              lightness: 40,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          elementType: \"labels.icon\",\r\n          stylers: [\r\n            {\r\n              visibility: \"off\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"transit\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#f2f2f2\",\r\n            },\r\n            {\r\n              lightness: 19,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"administrative\",\r\n          elementType: \"geometry.fill\",\r\n          stylers: [\r\n            {\r\n              color: \"#fefefe\",\r\n            },\r\n            {\r\n              lightness: 20,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"administrative\",\r\n          elementType: \"geometry.stroke\",\r\n          stylers: [\r\n            {\r\n              color: \"#fefefe\",\r\n            },\r\n            {\r\n              lightness: 17,\r\n            },\r\n            {\r\n              weight: 1.2,\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  return (\r\n    <Card mb={1}>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Light Style\r\n        </Typography>\r\n        <Typography variant=\"body2\" gutterBottom>\r\n          Light color scheme.\r\n        </Typography>\r\n\r\n        <Spacer mb={6} />\r\n\r\n        <GoogleMapReactWrapper>\r\n          <GoogleMapReact\r\n            options={getMapOptions}\r\n            bootstrapURLKeys={{\r\n              key: \"AIzaSyA-aWrwgr64q4b3TEZwQ0lkHI4lZK-moM4\",\r\n            }}\r\n            defaultCenter={options.center}\r\n            defaultZoom={options.zoom}\r\n          />\r\n        </GoogleMapReactWrapper>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default LightStyle;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport GoogleMapReact from \"google-map-react\";\r\n\r\nimport { CardContent, Card as MuiCard, Typography } from \"@mui/material\";\r\nimport { spacing } from \"@mui/system\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\n\r\nconst Spacer = styled.div(spacing);\r\n\r\nconst GoogleMapReactWrapper = styled.div`\r\n  height: 300px;\r\n  width: 100%;\r\n`;\r\n\r\nfunction DarkStyle() {\r\n  const options = {\r\n    center: {\r\n      lat: 40.712784,\r\n      lng: -74.005941,\r\n    },\r\n    zoom: 14,\r\n  };\r\n\r\n  const getMapOptions = () => {\r\n    return {\r\n      fullscreenControl: true,\r\n      mapTypeControl: true,\r\n      scaleControl: true,\r\n      scrollwheel: false,\r\n      streetViewControl: true,\r\n      styles: [\r\n        {\r\n          featureType: \"all\",\r\n          elementType: \"labels.text.fill\",\r\n          stylers: [\r\n            {\r\n              saturation: 36,\r\n            },\r\n            {\r\n              color: \"#000000\",\r\n            },\r\n            {\r\n              lightness: 40,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"all\",\r\n          elementType: \"labels.text.stroke\",\r\n          stylers: [\r\n            {\r\n              visibility: \"on\",\r\n            },\r\n            {\r\n              color: \"#000000\",\r\n            },\r\n            {\r\n              lightness: 16,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"all\",\r\n          elementType: \"labels.icon\",\r\n          stylers: [\r\n            {\r\n              visibility: \"off\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"administrative\",\r\n          elementType: \"geometry.fill\",\r\n          stylers: [\r\n            {\r\n              color: \"#000000\",\r\n            },\r\n            {\r\n              lightness: 20,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"administrative\",\r\n          elementType: \"geometry.stroke\",\r\n          stylers: [\r\n            {\r\n              color: \"#000000\",\r\n            },\r\n            {\r\n              lightness: 17,\r\n            },\r\n            {\r\n              weight: 1.2,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"landscape\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#000000\",\r\n            },\r\n            {\r\n              lightness: 20,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"poi\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#000000\",\r\n            },\r\n            {\r\n              lightness: 21,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"road.highway\",\r\n          elementType: \"geometry.fill\",\r\n          stylers: [\r\n            {\r\n              color: \"#000000\",\r\n            },\r\n            {\r\n              lightness: 17,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"road.highway\",\r\n          elementType: \"geometry.stroke\",\r\n          stylers: [\r\n            {\r\n              color: \"#000000\",\r\n            },\r\n            {\r\n              lightness: 29,\r\n            },\r\n            {\r\n              weight: 0.2,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"road.arterial\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#000000\",\r\n            },\r\n            {\r\n              lightness: 18,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"road.local\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#000000\",\r\n            },\r\n            {\r\n              lightness: 16,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"transit\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#000000\",\r\n            },\r\n            {\r\n              lightness: 19,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          featureType: \"water\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#000000\",\r\n            },\r\n            {\r\n              lightness: 17,\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  return (\r\n    <Card mb={1}>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Dark Style\r\n        </Typography>\r\n        <Typography variant=\"body2\" gutterBottom>\r\n          Dark color scheme.\r\n        </Typography>\r\n\r\n        <Spacer mb={6} />\r\n\r\n        <GoogleMapReactWrapper>\r\n          <GoogleMapReact\r\n            options={getMapOptions}\r\n            bootstrapURLKeys={{\r\n              key: \"AIzaSyA-aWrwgr64q4b3TEZwQ0lkHI4lZK-moM4\",\r\n            }}\r\n            defaultCenter={options.center}\r\n            defaultZoom={options.zoom}\r\n          />\r\n        </GoogleMapReactWrapper>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default DarkStyle;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport styled from \"@emotion/styled\";\r\nimport GoogleMapReact from \"google-map-react\";\r\n\r\nimport { CardContent, Card as MuiCard, Typography } from \"@mui/material\";\r\nimport { spacing } from \"@mui/system\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\n\r\nconst Spacer = styled.div(spacing);\r\n\r\nconst GoogleMapReactWrapper = styled.div`\r\n  height: 300px;\r\n  width: 100%;\r\n`;\r\n\r\nfunction Streetview() {\r\n  const options = {\r\n    center: {\r\n      lat: 40.712784,\r\n      lng: -74.005941,\r\n    },\r\n    zoom: 14,\r\n  };\r\n\r\n  const getMapOptions = () => {\r\n    return {\r\n      fullscreenControl: true,\r\n      mapTypeControl: true,\r\n      scaleControl: true,\r\n      scrollwheel: false,\r\n      streetViewControl: true,\r\n    };\r\n  };\r\n\r\n  const apiIsLoaded = (map, maps) => {\r\n    if (map) {\r\n      const panorama = new maps.StreetViewPanorama(\r\n        ReactDOM.findDOMNode(panoramaRef.current),\r\n        {\r\n          position: {\r\n            lat: 42.345573,\r\n            lng: -71.098326,\r\n          },\r\n          pov: {\r\n            heading: 160,\r\n            pitch: 0,\r\n          },\r\n          visible: true,\r\n        }\r\n      );\r\n      map.setStreetView(panorama);\r\n    }\r\n  };\r\n\r\n  const panoramaRef = React.createRef();\r\n\r\n  return (\r\n    <Card mb={1}>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Streetview\r\n        </Typography>\r\n        <Typography variant=\"body2\" gutterBottom>\r\n          Panoramic 360 degree views from designated roads throughout its\r\n          coverage area.\r\n        </Typography>\r\n\r\n        <Spacer mb={6} />\r\n\r\n        <GoogleMapReactWrapper>\r\n          <GoogleMapReact\r\n            ref={panoramaRef}\r\n            options={getMapOptions}\r\n            bootstrapURLKeys={{\r\n              key: \"AIzaSyA-aWrwgr64q4b3TEZwQ0lkHI4lZK-moM4\",\r\n            }}\r\n            defaultCenter={options.center}\r\n            defaultZoom={options.zoom}\r\n            onGoogleApiLoaded={({ map, maps }) => apiIsLoaded(map, maps)}\r\n            yesIWantToUseGoogleMapApiInternals={true}\r\n          />\r\n        </GoogleMapReactWrapper>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Streetview;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport GoogleMapReact from \"google-map-react\";\r\n\r\nimport { CardContent, Card as MuiCard, Typography } from \"@mui/material\";\r\nimport { spacing } from \"@mui/system\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\n\r\nconst Spacer = styled.div(spacing);\r\n\r\nconst GoogleMapReactWrapper = styled.div`\r\n  height: 300px;\r\n  width: 100%;\r\n`;\r\n\r\nfunction Markers() {\r\n  const options = {\r\n    center: {\r\n      lat: 40.712784,\r\n      lng: -74.005941,\r\n    },\r\n    zoom: 14,\r\n  };\r\n\r\n  const getMapOptions = (maps) => {\r\n    return {\r\n      fullscreenControl: true,\r\n      mapTypeControl: true,\r\n      mapTypeId: maps.MapTypeId.ROADMAP,\r\n      scaleControl: true,\r\n      scrollwheel: false,\r\n      streetViewControl: true,\r\n    };\r\n  };\r\n\r\n  const renderMarkers = (map, maps) => {\r\n    new maps.Marker({\r\n      position: {\r\n        lat: 40.712784,\r\n        lng: -74.005941,\r\n      },\r\n      map,\r\n      title: \"Hello World!\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Card mb={1}>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Markers\r\n        </Typography>\r\n        <Typography variant=\"body2\" gutterBottom>\r\n          Identify a location on a map.\r\n        </Typography>\r\n\r\n        <Spacer mb={6} />\r\n\r\n        <GoogleMapReactWrapper>\r\n          <GoogleMapReact\r\n            options={getMapOptions}\r\n            bootstrapURLKeys={{\r\n              key: \"AIzaSyA-aWrwgr64q4b3TEZwQ0lkHI4lZK-moM4\",\r\n            }}\r\n            defaultCenter={options.center}\r\n            defaultZoom={options.zoom}\r\n            onGoogleApiLoaded={({ map, maps }) => renderMarkers(map, maps)}\r\n          />\r\n        </GoogleMapReactWrapper>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Markers;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet-async\";\r\n\r\nimport {\r\n  Grid,\r\n  Link,\r\n  Breadcrumbs as MuiBreadcrumbs,\r\n  Divider as MuiDivider,\r\n  Typography as MuiTypography,\r\n} from \"@mui/material\";\r\nimport { spacing } from \"@mui/system\";\r\n\r\nimport Default from \"./Default\";\r\nimport Hybrid from \"./Hybrid\";\r\nimport LightStyle from \"./LightStyle\";\r\nimport DarkStyle from \"./DarkStyle\";\r\nimport Streetview from \"./Streetview\";\r\nimport Markers from \"./Markers\";\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nconst Breadcrumbs = styled(MuiBreadcrumbs)(spacing);\r\n\r\nconst Typography = styled(MuiTypography)(spacing);\r\n\r\nfunction GoogleMaps() {\r\n  return (\r\n    <React.Fragment>\r\n      <Helmet title=\"Google Maps\" />\r\n      <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n        Google Maps\r\n      </Typography>\r\n\r\n      <Breadcrumbs aria-label=\"Breadcrumb\" mt={2}>\r\n        <Link component={NavLink} to=\"/\">\r\n          Dashboard\r\n        </Link>\r\n        <Link component={NavLink} to=\"/\">\r\n          Maps\r\n        </Link>\r\n        <Typography>Google Maps</Typography>\r\n      </Breadcrumbs>\r\n\r\n      <Divider my={6} />\r\n\r\n      <Grid container spacing={6}>\r\n        <Grid item xs={12} md={6}>\r\n          <Default />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <Hybrid />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <LightStyle />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <DarkStyle />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <Streetview />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <Markers />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default GoogleMaps;\r\n"],"names":["Card","styled","MuiCard","spacing","Spacer","GoogleMapReactWrapper","options","center","lat","lng","zoom","_jsx","mb","children","_jsxs","CardContent","Typography","variant","gutterBottom","GoogleMapReact","maps","fullscreenControl","mapTypeControl","mapTypeId","MapTypeId","ROADMAP","scaleControl","scrollwheel","streetViewControl","bootstrapURLKeys","key","defaultCenter","defaultZoom","HYBRID","getMapOptions","styles","featureType","elementType","stylers","color","lightness","weight","visibility","saturation","panoramaRef","React","ref","onGoogleApiLoaded","_ref","map","apiIsLoaded","panorama","StreetViewPanorama","ReactDOM","current","position","pov","heading","pitch","visible","setStreetView","yesIWantToUseGoogleMapApiInternals","renderMarkers","Marker","title","Divider","MuiDivider","Breadcrumbs","MuiBreadcrumbs","MuiTypography","Helmet","display","mt","Link","component","NavLink","to","my","Grid","container","item","xs","md","Default","Hybrid","LightStyle","DarkStyle","Streetview","Markers"],"sourceRoot":""}