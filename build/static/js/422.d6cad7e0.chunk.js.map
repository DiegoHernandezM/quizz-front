{"version":3,"file":"static/js/422.d6cad7e0.chunk.js","mappings":"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","sources":["pages/pages/Tasks.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { MessageCircle } from \"react-feather\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { faker } from \"@faker-js/faker\";\r\n\r\nimport {\r\n  Avatar,\r\n  AvatarGroup as MuiAvatarGroup,\r\n  Breadcrumbs as MuiBreadcrumbs,\r\n  Button,\r\n  Card as MuiCard,\r\n  CardContent as MuiCardContent,\r\n  Divider as MuiDivider,\r\n  Grid,\r\n  Link,\r\n  Typography as MuiTypography,\r\n} from \"@mui/material\";\r\nimport { spacing } from \"@mui/system\";\r\nimport { orange, green, blue } from \"@mui/material/colors\";\r\nimport { Add as AddIcon } from \"@mui/icons-material\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\n\r\nconst CardContent = styled(MuiCardContent)`\r\n  &:last-child {\r\n    padding-bottom: ${(props) => props.theme.spacing(4)};\r\n  }\r\n`;\r\n\r\nconst AvatarGroup = styled(MuiAvatarGroup)`\r\n  display: inline-flex;\r\n`;\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nconst Breadcrumbs = styled(MuiBreadcrumbs)(spacing);\r\n\r\nconst TaskWrapper = styled(Card)`\r\n  border: 1px solid ${(props) => props.theme.palette.grey[300]};\r\n  margin-bottom: ${(props) => props.theme.spacing(4)};\r\n  cursor: grab;\r\n\r\n  &:hover {\r\n    background: ${(props) => props.theme.palette.background.default};\r\n  }\r\n`;\r\n\r\nconst TaskWrapperContent = styled(CardContent)`\r\n  position: relative;\r\n\r\n  &:last-child {\r\n    padding-bottom: ${(props) => props.theme.spacing(4)};\r\n  }\r\n`;\r\n\r\nconst TaskAvatars = styled.div`\r\n  margin-top: ${(props) => props.theme.spacing(1)};\r\n`;\r\n\r\nconst MessageCircleIcon = styled(MessageCircle)`\r\n  color: ${(props) => props.theme.palette.grey[500]};\r\n  vertical-align: middle;\r\n`;\r\n\r\nconst TaskBadge = styled.div`\r\n  background: ${(props) => props.color};\r\n  width: 40px;\r\n  height: 6px;\r\n  border-radius: 6px;\r\n  display: inline-block;\r\n  margin-right: ${(props) => props.theme.spacing(2)};\r\n`;\r\n\r\nconst TaskNotifications = styled.div`\r\n  display: flex;\r\n  position: absolute;\r\n  bottom: ${(props) => props.theme.spacing(4)};\r\n  right: ${(props) => props.theme.spacing(4)};\r\n`;\r\n\r\nconst TaskNotificationsAmount = styled.div`\r\n  color: ${(props) => props.theme.palette.grey[500]};\r\n  font-weight: 600;\r\n  margin-right: ${(props) => props.theme.spacing(1)};\r\n  line-height: 1.75;\r\n`;\r\n\r\nconst Typography = styled(MuiTypography)(spacing);\r\n\r\nconst TaskTitle = styled(Typography)`\r\n  font-weight: 600;\r\n  font-size: 15px;\r\n  margin-right: ${(props) => props.theme.spacing(10)};\r\n`;\r\n\r\nconst mockItems1 = [\r\n  {\r\n    id: faker.datatype.uuid(),\r\n    title: \"Redesign the homepage\",\r\n    badges: [green[600], orange[600]],\r\n    notifications: 2,\r\n    avatars: [1, 2, 3, 4],\r\n  },\r\n  {\r\n    id: faker.datatype.uuid(),\r\n    title: \"Upgrade dependencies to latest versions\",\r\n    badges: [green[600]],\r\n    notifications: 1,\r\n    avatars: [2],\r\n  },\r\n  {\r\n    id: faker.datatype.uuid(),\r\n    title: \"Google Adwords best practices\",\r\n    badges: [],\r\n    notifications: 0,\r\n    avatars: [2, 3],\r\n  },\r\n  {\r\n    id: faker.datatype.uuid(),\r\n    title: \"Improve site speed\",\r\n    badges: [green[600]],\r\n    notifications: 3,\r\n    avatars: [],\r\n  },\r\n  {\r\n    id: faker.datatype.uuid(),\r\n    title: \"Stripe payment integration\",\r\n    badges: [blue[600]],\r\n    notifications: 0,\r\n    avatars: [],\r\n  },\r\n];\r\n\r\nconst mockItems2 = [\r\n  {\r\n    id: faker.datatype.uuid(),\r\n    title: \"Google Adwords best practices\",\r\n    badges: [],\r\n    notifications: 0,\r\n    avatars: [2, 3],\r\n  },\r\n  {\r\n    id: faker.datatype.uuid(),\r\n    title: \"Stripe payment integration\",\r\n    badges: [blue[600]],\r\n    notifications: 0,\r\n    avatars: [2],\r\n  },\r\n];\r\n\r\nconst mockItems3 = [\r\n  {\r\n    id: faker.datatype.uuid(),\r\n    title: \"Improve site speed\",\r\n    badges: [green[600]],\r\n    notifications: 3,\r\n    avatars: [1, 2],\r\n  },\r\n  {\r\n    id: faker.datatype.uuid(),\r\n    title: \"Google Adwords best practices\",\r\n    badges: [],\r\n    notifications: 0,\r\n    avatars: [2],\r\n  },\r\n  {\r\n    id: faker.datatype.uuid(),\r\n    title: \"Redesign the homepage\",\r\n    badges: [green[600], orange[600]],\r\n    notifications: 2,\r\n    avatars: [],\r\n  },\r\n];\r\n\r\nconst mockColumns = {\r\n  [faker.datatype.uuid()]: {\r\n    title: \"Backlog\",\r\n    description: \"Nam pretium turpis et arcu. Duis arcu.\",\r\n    items: mockItems1,\r\n  },\r\n  [faker.datatype.uuid()]: {\r\n    title: \"In Progress\",\r\n    description: \"Curabitur ligula sapien, tincidunt non.\",\r\n    items: mockItems2,\r\n  },\r\n  [faker.datatype.uuid()]: {\r\n    title: \"Completed\",\r\n    description: \"Aenean posuere, tortor sed cursus feugiat.\",\r\n    items: mockItems3,\r\n  },\r\n};\r\n\r\nconst onDragEnd = (result, columns, setColumns) => {\r\n  if (!result.destination) return;\r\n  const { source, destination } = result;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumn = columns[source.droppableId];\r\n    const destColumn = columns[destination.droppableId];\r\n    const sourceItems = [...sourceColumn.items];\r\n    const destItems = [...destColumn.items];\r\n    const [removed] = sourceItems.splice(source.index, 1);\r\n    destItems.splice(destination.index, 0, removed);\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...sourceColumn,\r\n        items: sourceItems,\r\n      },\r\n      [destination.droppableId]: {\r\n        ...destColumn,\r\n        items: destItems,\r\n      },\r\n    });\r\n  } else {\r\n    const column = columns[source.droppableId];\r\n    const copiedItems = [...column.items];\r\n    const [removed] = copiedItems.splice(source.index, 1);\r\n    copiedItems.splice(destination.index, 0, removed);\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...column,\r\n        items: copiedItems,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nconst Lane = ({ column, children }) => {\r\n  return (\r\n    <Grid item xs={12} lg={4} xl={4}>\r\n      <Card mb={6}>\r\n        <CardContent pb={0}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            {column.title}\r\n          </Typography>\r\n          <Typography variant=\"body2\" mb={4}>\r\n            {column.description}\r\n          </Typography>\r\n          {children}\r\n          <Button color=\"primary\" variant=\"contained\" fullWidth>\r\n            <AddIcon />\r\n            Add new task\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst Task = ({ item }) => {\r\n  return (\r\n    <TaskWrapper mb={4}>\r\n      <TaskWrapperContent>\r\n        {item.badges &&\r\n          item.badges.map((color, i) => <TaskBadge color={color} key={i} />)}\r\n\r\n        <TaskTitle variant=\"body1\" gutterBottom>\r\n          {item.title}\r\n        </TaskTitle>\r\n\r\n        <TaskAvatars>\r\n          <AvatarGroup max={3}>\r\n            {!!item.avatars &&\r\n              item.avatars.map((avatar, i) => (\r\n                <Avatar\r\n                  src={`/static/img/avatars/avatar-${avatar}.jpg`}\r\n                  key={i}\r\n                />\r\n              ))}\r\n          </AvatarGroup>\r\n        </TaskAvatars>\r\n\r\n        {!!item.notifications && item.notifications > 0 && (\r\n          <TaskNotifications>\r\n            <TaskNotificationsAmount>\r\n              {item.notifications}\r\n            </TaskNotificationsAmount>\r\n            <MessageCircleIcon />\r\n          </TaskNotifications>\r\n        )}\r\n      </TaskWrapperContent>\r\n    </TaskWrapper>\r\n  );\r\n};\r\n\r\nfunction Tasks() {\r\n  const [columns, setColumns] = useState(mockColumns);\r\n  const [documentReady, setDocumentReady] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setDocumentReady(true);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Helmet title=\"Tasks\" />\r\n      <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n        Tasks\r\n      </Typography>\r\n\r\n      <Breadcrumbs aria-label=\"Breadcrumb\" mt={2}>\r\n        <Link component={NavLink} to=\"/\">\r\n          Dashboard\r\n        </Link>\r\n        <Link component={NavLink} to=\"/\">\r\n          Pages\r\n        </Link>\r\n        <Typography>Tasks</Typography>\r\n      </Breadcrumbs>\r\n\r\n      <Divider my={6} />\r\n\r\n      <Grid container spacing={6}>\r\n        {!!documentReady && (\r\n          <DragDropContext\r\n            onDragEnd={(result) => onDragEnd(result, columns, setColumns)}\r\n          >\r\n            {Object.entries(columns).map(([columnId, column]) => (\r\n              <Lane key={columnId} column={column}>\r\n                <Droppable droppableId={columnId} key={columnId}>\r\n                  {(provided) => {\r\n                    return (\r\n                      <div\r\n                        {...provided.droppableProps}\r\n                        ref={provided.innerRef}\r\n                        style={{\r\n                          minHeight: 50,\r\n                        }}\r\n                      >\r\n                        {column.items.map((item, index) => {\r\n                          return (\r\n                            <Draggable\r\n                              key={item.id}\r\n                              draggableId={item.id}\r\n                              index={index}\r\n                            >\r\n                              {(provided) => {\r\n                                return (\r\n                                  <div\r\n                                    ref={provided.innerRef}\r\n                                    {...provided.draggableProps}\r\n                                    {...provided.dragHandleProps}\r\n                                  >\r\n                                    <Task item={item} />\r\n                                  </div>\r\n                                );\r\n                              }}\r\n                            </Draggable>\r\n                          );\r\n                        })}\r\n                        {provided.placeholder}\r\n                      </div>\r\n                    );\r\n                  }}\r\n                </Droppable>\r\n              </Lane>\r\n            ))}\r\n          </DragDropContext>\r\n        )}\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Tasks;\r\n"],"names":["Card","styled","MuiCard","spacing","CardContent","MuiCardContent","props","theme","AvatarGroup","MuiAvatarGroup","Divider","MuiDivider","Breadcrumbs","MuiBreadcrumbs","TaskWrapper","palette","grey","background","default","TaskWrapperContent","TaskAvatars","MessageCircleIcon","MessageCircle","TaskBadge","color","TaskNotifications","TaskNotificationsAmount","Typography","MuiTypography","TaskTitle","mockItems1","id","faker","title","badges","green","orange","notifications","avatars","blue","mockItems2","mockItems3","mockColumns","description","items","Lane","_ref","column","children","_jsx","Grid","item","xs","lg","xl","mb","_jsxs","pb","variant","gutterBottom","Button","fullWidth","AddIcon","Task","_ref2","map","i","max","avatar","Avatar","src","columns","setColumns","useState","documentReady","setDocumentReady","useEffect","React","Helmet","display","mt","Link","component","NavLink","to","my","container","DragDropContext","onDragEnd","result","destination","source","droppableId","sourceColumn","destColumn","sourceItems","destItems","removed","splice","index","copiedItems","Object","entries","_ref3","columnId","Droppable","provided","droppableProps","ref","innerRef","style","minHeight","Draggable","draggableId","draggableProps","dragHandleProps","placeholder"],"sourceRoot":""}